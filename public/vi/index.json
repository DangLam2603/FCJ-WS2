[
{
	"uri": "//localhost:1313/vi/2-preparationsteps/2.1-createkmskey/",
	"title": "Clone code từ GitHub",
	"tags": [],
	"description": "",
	"content": "Clone code từ GitHub Truy cập vào folder mà bạn muốn lưu trữ code.\nChuột phải chọn Open Git Bash Here. Gõ lệnh git clone https://github.com/NTDung93/library-app.git rồi enter.\nHoàn thành clone code từ GitHub Checkout qua nhánh deploy bằng lệnh git checkout deploy (nhánh đã được tinh chỉnh source code để thuận tiện cho việc deploy) Nếu bạn có mở source code phần Front-end, nó sẽ báo lỗi đỏ khắp màn hình, đừng lo lắng vì source đó đã xóa folder Node_modules để phục vụ cho việc deploy trong các section tới, bạn chỉ cần chạy lệnh npm install để cài đặt lại các package cần thiết. Nhưng nếu bạn không có nhu cầu mở source code phần Front-end, bạn có thể bỏ qua bước này.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.1-introduce-to-amazon-guardduty/",
	"title": "Giải thích luồng chạy",
	"tags": [],
	"description": "",
	"content": "Giải thích luồng chạy của kiến trúc ba tầng Trong hình dưới đây, chúng ta sẽ thấy mô hình kiến trúc của ứng dụng fullstack với kiến trúc ba tầng. Đầu tiên, thao tác của người dùng sẽ đi qua Internet gateway và sau đó đến External (Internet facing) Application Load Balancer. Load Balancer sẽ chuyển tiếp các traffic đến các máy chủ ở Web tier. Sau đó các máy chủ ở Web tier sẽ gọi các API đến Interal Load Balancer. Load Balancer sau đó sẽ chuyển tiếp các traffic đến các máy chủ ở App tier. Cuối cùng, các máy chủ ở App tier sẽ xử lý yêu cầu, truy xuất dữ liệu ở Data tier (nếu cần) và trả kết quả về cho người dùng ở Web tier. Đây là mô hình kiến trúc ba lớp cơ bản mà chúng ta sẽ triển khai trong workshop này.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu kiến trúc 3 tầng Kiến trúc ba tầng là cách triển khai phổ biến nhất của kiến ​​trúc nhiều tầng, bao gồm một tầng giao diện, tầng logic và tầng dữ liệu. Hình minh họa sau đây cho thấy một ví dụ về một ứng dụng ba tầng chung đơn giản.\nKiến trúc 3 tầng bao gồm:\nPresentation tier / Web Tier: tầng giao diện để người dùng có thể tương tác trực tiếp (vd: trang web hay UI của ứng dụng mobile). Logic tier / App tier: tầng để xử lý logic và thực thi những câu lệnh của người dùng. Data tier: tầng lưu trữ dữ liệu của app. Lợi ích của việc sử dụng kiến trúc 3 tầng:\nTính mô-đun: kiến trúc này giúp ta module hóa app thành các phần độc lập nhau. Điều này giúp team dev có thể tập trung phát triển từng tầng của app, dẫn đến các thay đổi được áp dụng nhanh nhất có thể. Ngoài ra, nó còn giúp việc khôi phục app diễn ra nhanh chóng hơn sau khi server bị down do lỗi hay thảm họa nhờ vào việc có thể khoanh vùng và sửa chữa phần bị lỗi. Tính sẵn sàng cao: vì kiến trúc triển khai ứng dụng trên nhiều Availability Zones, các AZ được thiết kế để không xảy ra sự cố ảnh hưởng đồng thời 2 AZ một lúc (fault isolation). Tính dự phòng cao: AWS cho phép triển khai bản stand by hay replica của primary database trên AZ còn lại. Nếu database chính bị down, ứng dụng vẫn có thể truy xuất dữ liệu từ replica database. "
},
{
	"uri": "//localhost:1313/vi/6-demo/6.1-uploadmalwarefiletos3/",
	"title": "Sửa lại file cấu hình Nginx",
	"tags": [],
	"description": "",
	"content": "Sửa lại file cấu hình Nginx Mở file nginx.conf từ project đã clone Sau đó sửa dòng số 58 trong file thành DNS Name của load balancer app-tier-internal-lb "
},
{
	"uri": "//localhost:1313/vi/5-exportfindingtos3/5.1-settingsfrequecy/",
	"title": "Tạo AMI cho App Tier",
	"tags": [],
	"description": "",
	"content": "Vì sao chúng ta cần tạo Amazon Machine Image (AMI)? AMI bao gồm operating system, applications, configurations, và data volumes. Reproduce config hoặc launch instance mới dễ dàng - một khi đã tạo một instance với những config mong muốn, ta tạo AMI từ instance đó. Khi ta tạo ra những instance mới từ AMI đó, sẽ đảm bảo được tính consistency, các instance đều có những config tương đồng nhau. Backup và recovery - AMI như snapshot dùng để backup, recovery khi có thiên tai, để reproduce những instance bị fail → Nếu có instance nào fail hoặc cần thay thế, sẽ dễ dàng và nhanh chóng hơn nếu tạo từ AMI thay vì từ đầu. Auto scaling - Khi chúng ta sử dụng ASG (Auto Scaling Group) để scale up app, AMI sẽ đảm bảo những instance mới sẽ có những config cần thiết. Tạo AMI từ instance Truy cập vào dịch vụ EC2:\nChọn Instances ở sidebar Chọn instance My App Server 1 Click Actions, sau đó click Image and template và chọn Create image Ở giao diện tạo image:\nImage name điền AppTierImage Image description điền App tier Lướt xuống dưới cùng, click Create image "
},
{
	"uri": "//localhost:1313/vi/3-guardduty/3.1-malwareprotections3/",
	"title": "Tạo database subnet group",
	"tags": [],
	"description": "",
	"content": "Database subnet group là gì và tại sao chúng ta cần nó? Database subnet group là một tập hợp các subnet mà bạn tạo ra trong VPC của bạn. Khi tạo một database instance, bạn cần phải chỉ định một database subnet group. Database subnet group phải chứa ít nhất một subnet trong mỗi AZ. Database subnet group đảm bảo rằng database instance có thể được triển khai trên nhiều AZ để có được tính sẵn sàng cao.\nTạo database subnet group Tìm và truy cập vào dịch vụ RDS Chọn Subnet groups ở sidebar và click Create DB subnet group Ở giao diện tạo DB subnet group:\nName điền db-subnet-group Description điền db-subnet-group VPC chọn my-vpc Ở phần Add subnets:\nAZ chọn ap-southeast-1a và ap-southeast-1b Subnets chọn Private DB Subnet 1 và Private DB Subnet 2 (có thể vào lại list các subnet, xem CIDR của mỗi subnet để chọn cho đúng) Sau đó click Create Hoàn thành tạo Subnet group. "
},
{
	"uri": "//localhost:1313/vi/4-setupnotification/4.1-createsns/",
	"title": "Tạo máy chủ EC2",
	"tags": [],
	"description": "",
	"content": "Tạo EC2 instance cho App Tier Tìm và chọn dịch vụ EC2 Chọn Instances ở sidebar, sau đó click Launch instances Name and tags điền My App Server 1 Ở phần AMI: chọn Amazon Linux AMI chọn Amazon Linux 2 AMI (HVM) Ở phần Key pair, ta chọn Proceed without a key pair vì ta sẽ connect EC2 instance thông qua AWS Systems Manager Session Manager. Ở phần Network settings: VPC chọn my-vpc Subnet chọn Private Subnet 1 Auto-assign public IP chọn Enable SG chọn Select existing security group Common SG chọn AppTier-SG Ở phần Advanced details, IAM instance profile chọn ec2role ta tạo ở trên Click Launch instance Hoàn thành tạo EC2 instance cho một server ở AppTier ở private subnet 1 "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Triển khai fullstack app với kiến trúc ba tầng",
	"tags": [],
	"description": "",
	"content": "Triển khai fullstack app với kiến trúc ba tầng Tổng quan Trong bài workshop này, chúng ta sẽ cùng nhau triển khai fullstack app (Spring Boot, React, MySQL) với kiến trúc ba tầng. Tìm hiểu các khái niệm, các tính năng của từng dịch vụ được sử dụng trong kiến trúc.\nNội dung Giới thiệu Các bước chuẩn bị Tạo database với RDS Triển khai App tier Tạo Internal LB và ASG Triển khai Web tier Tạo External LB và ASG Demo web sau khi deploy thành công Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-preparationsteps/2.3-enableguardduty/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trong section 2 này, chúng ta sẽ cùng nhau setup những thứ quan trọng và cần thiết để thực hiện workshop này.\nNội dung Clone clode từ GitHub Tạo S3 Bucket Tạo EC2 role Tạo VPC Tạo Subnet Tạo Internet Gateway Tạo NAT Gateway Tạo Route Table Tạo Security Group "
},
{
	"uri": "//localhost:1313/vi/2-preparationsteps/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trong section 2 này, chúng ta sẽ cùng nhau setup những thứ quan trọng và cần thiết để thực hiện workshop này.\nNội dung Clone clode từ GitHub Tạo S3 Bucket Tạo EC2 role Tạo VPC Tạo Subnet Tạo Internet Gateway Tạo NAT Gateway Tạo Route Table Tạo Security Group "
},
{
	"uri": "//localhost:1313/vi/4-setupnotification/4.2-createeventbridge/",
	"title": "Kết nối tới EC2 instance",
	"tags": [],
	"description": "",
	"content": "Kết nối tới EC2 instance Trên giao diện các EC2 instances, chọn instance vừa tạo và bấm Connect Chuyển qua tab Session Manager và click Connect Connect thành công vào instance Chạy lệnh sudo -su ec2-user để chuyển từ user sang ec2-user, và có những quyền quản trị root đối với instance Tiếp đó chạy lệnh ping 8.8.8.8 (IP address của Google’s DNS server) để test xem instance của ta có thể kết nối với internet bên ngoài thông qua igw không "
},
{
	"uri": "//localhost:1313/vi/3-guardduty/3.2-createpolicyprotection/",
	"title": "Tạo database instance",
	"tags": [],
	"description": "",
	"content": "Tạo database instance Trong giao diện Amazon RDS, chọn Databases ở sidebar sau đó click Create database Ở giao diện Create database:\nCreation method chọn Standard create Engine type chọn MySQL Templates chọn Dev/Test, Deployment options chọn Multi-AZ DB instance (để tạo ra instance chính ở AZ hiện tại, và một clone instance ở AZ còn lại đã define trong db subnet group phòng failover) → Cách triển khai này sẽ best practice vì đáp ứng tiêu chí High availability và Data redundancy Nhưng chúng ta có thể chọn option khác là Free tier để vừa phù hợp với scope của bài toán, vừa tiết kiệm chi phí Ở phần Settings:\nDB instance identifier điền database-1 Master username điền admin Master password điền 12345678 Ở phần Connectivity:\nComputer resource chọn Dont connect to EC2 VPC chọn my-vpc DB subnet group chọn db-subnet-group ta đã tạo Public access chọn No (chọn Yes nếu muốn test connection từ public network) VPC SG chọn Choose existing Existing VPC SG chọn DataTier-SG AZ chọn ap-southeast-1a Ở phần Additional configuration, điền db name là demodb (master name: admin, pass: 12345678) Kéo xuống dưới cùng và chọn Create database: Hoàn thành tạo database instance Config lại để test connection từ public network Để có thể test connection tới endpoint của db vừa tạo từ public network, ta phải config lại một số thứ như sau (sau khi test xong nhớ trả tất cả về trạng thái ban đầu)\nVào route table private-db-route-table, thêm một route mới với destination là 0.0.0.0/0 và target là internet gateway ta đã tạo Vào security group DataTier-SG, thêm một inbound rule mới cho phép All traffic truy cập Cập nhật lại trạng thái của Public access ở phần Connectivity trong db instance từ No thành Yes Test connection tới endpoint của db instance vừa tạo Vào phần mềm MySQL Workbench, tạo connect mới:\nConnection Name điền db-ws-01 Hostname copy và paste endpoint của db instance vừa tạo Port điền 3306 Username điền admin Password click Store in Vault rồi nhập 12345678 Sau cùng, nhấn Test Connection Test connection thành công Vào file application.properties và config lại datasource url, username và password như hình dưới Run app và check trong connection vừa tạo trong MySQL, ta thấy các table đã được auto generate nhờ vào cơ chế code first (chỉ để test vì trong workshop này chúng ta sẽ sử dụng database first) "
},
{
	"uri": "//localhost:1313/vi/3-guardduty/3.3-createroleproctection/",
	"title": "Tạo database instance",
	"tags": [],
	"description": "",
	"content": "Tạo database instance Trong giao diện Amazon RDS, chọn Databases ở sidebar sau đó click Create database Ở giao diện Create database:\nCreation method chọn Standard create Engine type chọn MySQL Templates chọn Dev/Test, Deployment options chọn Multi-AZ DB instance (để tạo ra instance chính ở AZ hiện tại, và một clone instance ở AZ còn lại đã define trong db subnet group phòng failover) → Cách triển khai này sẽ best practice vì đáp ứng tiêu chí High availability và Data redundancy Nhưng chúng ta có thể chọn option khác là Free tier để vừa phù hợp với scope của bài toán, vừa tiết kiệm chi phí Ở phần Settings:\nDB instance identifier điền database-1 Master username điền admin Master password điền 12345678 Ở phần Connectivity:\nComputer resource chọn Dont connect to EC2 VPC chọn my-vpc DB subnet group chọn db-subnet-group ta đã tạo Public access chọn No (chọn Yes nếu muốn test connection từ public network) VPC SG chọn Choose existing Existing VPC SG chọn DataTier-SG AZ chọn ap-southeast-1a Ở phần Additional configuration, điền db name là demodb (master name: admin, pass: 12345678) Kéo xuống dưới cùng và chọn Create database: Hoàn thành tạo database instance Config lại để test connection từ public network Để có thể test connection tới endpoint của db vừa tạo từ public network, ta phải config lại một số thứ như sau (sau khi test xong nhớ trả tất cả về trạng thái ban đầu)\nVào route table private-db-route-table, thêm một route mới với destination là 0.0.0.0/0 và target là internet gateway ta đã tạo Vào security group DataTier-SG, thêm một inbound rule mới cho phép All traffic truy cập Cập nhật lại trạng thái của Public access ở phần Connectivity trong db instance từ No thành Yes Test connection tới endpoint của db instance vừa tạo Vào phần mềm MySQL Workbench, tạo connect mới:\nConnection Name điền db-ws-01 Hostname copy và paste endpoint của db instance vừa tạo Port điền 3306 Username điền admin Password click Store in Vault rồi nhập 12345678 Sau cùng, nhấn Test Connection Test connection thành công Vào file application.properties và config lại datasource url, username và password như hình dưới Run app và check trong connection vừa tạo trong MySQL, ta thấy các table đã được auto generate nhờ vào cơ chế code first (chỉ để test vì trong workshop này chúng ta sẽ sử dụng database first) "
},
{
	"uri": "//localhost:1313/vi/3-guardduty/3.4-enableprotection/",
	"title": "Tạo database instance",
	"tags": [],
	"description": "",
	"content": "Tạo database instance Trong giao diện Amazon RDS, chọn Databases ở sidebar sau đó click Create database Ở giao diện Create database:\nCreation method chọn Standard create Engine type chọn MySQL Templates chọn Dev/Test, Deployment options chọn Multi-AZ DB instance (để tạo ra instance chính ở AZ hiện tại, và một clone instance ở AZ còn lại đã define trong db subnet group phòng failover) → Cách triển khai này sẽ best practice vì đáp ứng tiêu chí High availability và Data redundancy Nhưng chúng ta có thể chọn option khác là Free tier để vừa phù hợp với scope của bài toán, vừa tiết kiệm chi phí Ở phần Settings:\nDB instance identifier điền database-1 Master username điền admin Master password điền 12345678 Ở phần Connectivity:\nComputer resource chọn Dont connect to EC2 VPC chọn my-vpc DB subnet group chọn db-subnet-group ta đã tạo Public access chọn No (chọn Yes nếu muốn test connection từ public network) VPC SG chọn Choose existing Existing VPC SG chọn DataTier-SG AZ chọn ap-southeast-1a Ở phần Additional configuration, điền db name là demodb (master name: admin, pass: 12345678) Kéo xuống dưới cùng và chọn Create database: Hoàn thành tạo database instance Config lại để test connection từ public network Để có thể test connection tới endpoint của db vừa tạo từ public network, ta phải config lại một số thứ như sau (sau khi test xong nhớ trả tất cả về trạng thái ban đầu)\nVào route table private-db-route-table, thêm một route mới với destination là 0.0.0.0/0 và target là internet gateway ta đã tạo Vào security group DataTier-SG, thêm một inbound rule mới cho phép All traffic truy cập Cập nhật lại trạng thái của Public access ở phần Connectivity trong db instance từ No thành Yes Test connection tới endpoint của db instance vừa tạo Vào phần mềm MySQL Workbench, tạo connect mới:\nConnection Name điền db-ws-01 Hostname copy và paste endpoint của db instance vừa tạo Port điền 3306 Username điền admin Password click Store in Vault rồi nhập 12345678 Sau cùng, nhấn Test Connection Test connection thành công Vào file application.properties và config lại datasource url, username và password như hình dưới Run app và check trong connection vừa tạo trong MySQL, ta thấy các table đã được auto generate nhờ vào cơ chế code first (chỉ để test vì trong workshop này chúng ta sẽ sử dụng database first) "
},
{
	"uri": "//localhost:1313/vi/2-preparationsteps/2.2-creates3bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Tạo S3 Bucket Truy cập giao diện AWS, tìm dịch vụ S3 sau đó click chọn Trong giao diện S3, click Create bucket Trong giao diện Create bucket:\nAWS Region chọn Singapore ap-southeast-1 Bucket name nhập demowebapp-workshop-01 Kéo xuống dưới cùng và chọn Create bucket Hoàn thành tạo S3 bucket "
},
{
	"uri": "//localhost:1313/vi/5-exportfindingtos3/5.2-attachpolicytos3/",
	"title": "Tạo Target group cho App Tier",
	"tags": [],
	"description": "",
	"content": "Tại sao cần tạo Target group? Vì khi đăng ký các ec2 instances vào target group, load balancer có thể theo dõi health của từng instance và route traffic tới healthy instance → ensure high availability. Tạo Target group Tại giao diện EC2, chọn Target Groups ở nhóm Load balancing ở sidebar, sau đó chọn Create target group Tại giao diện tạo target group:\nTarget group name điền AppTierTargetGroup Protocol: HTTP, Port: 8080 VPC chọn my-vpc Kéo xuống dưới cùng click Next rồi click Create target group Hoàn thành tạo target group "
},
{
	"uri": "//localhost:1313/vi/6-demo/6.2-checkemailnoification/",
	"title": "Upaload code lên S3",
	"tags": [],
	"description": "",
	"content": "Upaload code lên S3 Vào folder library-app-fe dưới local, xóa folder node_modules (nếu có) Truy cập vào bucket đã tạo của S3, kéo thả folder library-app-fe và file nginx.config dưới local vào bucket để tải folder và file lên bucket. "
},
{
	"uri": "//localhost:1313/vi/3-guardduty/",
	"title": "Tạo Database với RDS",
	"tags": [],
	"description": "",
	"content": "RDS là gì? Dịch vụ cơ sở dữ liệu quan hệ của Amazon (Amazon RDS) là một dịch vụ được quản lý, giúp bạn dễ dàng thiết lập, vận hành và điều chỉnh quy mô cơ sở dữ liệu quan hệ trên đám mây. Dịch vụ này cung cấp tính năng hiệu quả về chi phí và có thể thay đổi quy mô, trong khi vẫn quản lý được các tác vụ quản trị cơ sở dữ liệu tiêu tốn nhiều thời gian, giúp bạn thoải mái tập trung vào các ứng dụng và công việc của bạn.\nNội dung Tạo database subnet group Tạo database instance "
},
{
	"uri": "//localhost:1313/vi/6-demo/6.3-checkexportfindings3/",
	"title": "Tạo EC2 instance",
	"tags": [],
	"description": "",
	"content": "Tạo EC2 instance Tương tự như tạo instance cho App server, ta tạo một instance cho web server với những thay đổi sau:\nInstance name điền My Web Server 1 Subnet chọn Public Subnet 1 Security group chọn WebTier-SG Advanced details, IAM instance profile chọn ec2role Cuối cùng chọn Launch instance Hoàn thành tạo EC2 instance cho web server "
},
{
	"uri": "//localhost:1313/vi/5-exportfindingtos3/5.3-attachpolicytokms/",
	"title": "Tạo Internal Load Balancer",
	"tags": [],
	"description": "",
	"content": "Tạo Internal Load Balancer Ở giao diện EC2, chọn Load balancers ở sidebar, sau đó click Create load balancer Tại giao diện chọn balancer type, click chọn Create của Application Load Balancer Tại màn hình tạo ALB:\nLB Name điền app-tier-internal-lb Scheme chọn Internal Ở phần Network mapping:\nVPC: my-vpc Tick chọn ap-southeast-1a, sau đó chọn Private Subnet 1 Tick chọn ap-southeast-1b, sau đó chọn Private Subnet 2 Ở phần Security groups chọn Internal-LB-SG. Ở phần Listeners and routing, default action chọn AppTierTargetGroup. Lướt xuống dưới cùng và click Create load balancer. Hoàn thành tạo load balancer cho app tier. "
},
{
	"uri": "//localhost:1313/vi/5-exportfindingtos3/5.4-enableexport/",
	"title": "Tạo Launch Template",
	"tags": [],
	"description": "",
	"content": "Sự khác nhau giữa Launch template và AMI? Launch template và AMI (Amazon Machine Images) đều là cơ sở quan trọng để khởi chạy các phiên bản EC2 trên AWS, nhưng chúng phục vụ cho các mục đích khác nhau:\nAMI (Amazon Machine Image): Một AMI là một template mô phỏng toàn bộ môi trường phần mềm của một phiên bản EC2 đang chạy. Nó bao gồm hệ điều hành, ứng dụng, cấu hình và khối lượng dữ liệu. AMI hoạt động như bản thiết kế cho việc tạo ra các phiên bản mới với cùng một setup. Bạn có thể coi chúng như các bản snapshots của một máy ảo. Launch template: Một Launch template xác định các chi tiết cấu hình cần thiết để khởi chạy một phiên bản EC2. Điều này bao gồm ID AMI (xác định môi trường phần mềm), security group, user data (scripts to run on instance startup), và các tham số khởi chạy khác. Nó về cơ bản xác định cách một phiên bản sẽ được cung cấp ngoài phần mềm cơ sở được cung cấp bởi AMI. Dưới đây là một ví dụ: Hãy tưởng tượng AMI như một công thức làm bánh, xác định các thành phần (hệ điều hành, ứng dụng). Một Launch template sẽ giống như hướng dẫn nướng bánh, bao gồm nhiệt độ lò (loại phiên bản), thời gian nướng, và bất kỳ bước nào bổ sung (các script dữ liệu người dùng). Bạn có thể sử dụng cùng một công thức làm bánh (AMI) với các hướng dẫn nướng khác nhau (Launch template) để tạo ra các loại bánh có biến thể (cấu hình phiên bản khác nhau).\nTạo Launch Template Tại giao diện EC2, chọn Launch templates ở sidebar, sau đó click Create launch template Tại giao diện tạo launch template, ở phần Launch template name and description, Launch template name điền AppTier-LaunchTemplate Ở phần chọn AMI, chọn Owned by me sau đó chọn AppTierImage Chọn Instance type là t2.micro Keypair để Don’t include in launch template Network settings:\nSubnet chọn Don’t include in launch template SG chọn existing sg, sau đó chọn AppTier-SG Advanced details, IAM instance profile chọn ec2role Kéo xuống dưới cùng, chọn Create launch template. Hoàn thành! "
},
{
	"uri": "//localhost:1313/vi/4-setupnotification/",
	"title": "Triển khai App Tier",
	"tags": [],
	"description": "",
	"content": "Triển khai App Tier Trong section này, chúng ta sẽ tạo máy chủ EC2 nằm trong private subnet, sau đó kết nối tới instance, cài đặt MySQL lên instance và chạy app của chúng ta trên instance.\nNội dung Tạo máy chủ EC2 Kết nối tới EC2 instance Tải MySQL lên instance Chạy app trên instance "
},
{
	"uri": "//localhost:1313/vi/5-exportfindingtos3/",
	"title": "Tạo Internal Load Balancer và Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Ở section này, chúng ta sẽ tạo Internal Load Balancer để cân bằng tải các traffic từ Web Tier tới App Tier và Auto Scaling Group cho App Tier.\nNội dung: Tạo AMI cho App Tier Tạo Tartget Group cho App Tier Tạo Internal Load Balancer Tạo Launch Template cho App Tier Tạo Auto Scaling Group "
},
{
	"uri": "//localhost:1313/vi/6-demo/",
	"title": "Triển khai Web Tier",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Trong phần này, chúng ta sẽ tiến hành triển khai Web Tier bằng cách upload mã nguồn của ứng dụng lên Amazon S3 và triển khai ứng dụng trên Amazon EC2. Ngoài ra chúng ta sẽ sử dụng Nginx trong workshop này. Nginx sẽ đóng vai trò là 1 web server mà chúng ta sẽ config để chạy úng dụng trên port 80, cũng như giúp chuyển hướng API request từ Web Tier đến App Tier thông qua Internal Load Balancer.\nNội dung: Sửa lại file cấu hình Nginx Upload mã nguồn ứng dụng lên Amazon S3 Tạo EC2 Instance Kết nối tới EC2 Instance "
},
{
	"uri": "//localhost:1313/vi/7-cleanupresources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Chúng ta sẽ tiến hành xóa các tài nguyên theo thứ tự sau:\nXóa NAT Gateway Xóa Elastic IPs Xóa Auto Scaling Group Xóa Load Balancer Xóa Target group Xóa Launch template Xóa AMIs Xóa EC2 instances Xóa Database RDS Xóa Route tables\nTa phải xóa các subnet associations của từng route table trước (vào subnet -\u0026gt; table associations -\u0026gt; edit subnet associations -\u0026gt; unchecked các subnet đã gán -\u0026gt; save) Xóa route table Xóa Internet Gateway\ndetach IGW ra khỏi VPC Xóa IGW Xóa VPC Xóa S3 bucket\nXóa các file trong bucket Xóa bucket "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]